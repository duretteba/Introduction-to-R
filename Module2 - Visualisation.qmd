---
title: "Premiers pas avec R"
format: html
editor: visual
copyright: "Barthélémy DURETTE 2024 tous droits réservés"
---

------------------------------------------------------------------------

# Visualisation des données

------------------------------------------------------------------------

### Bienvenue dans ce deuxième module de la formation "Introduction au logiciel R".

Nous y verrons :

1.  **Comment charger et utiliser la librairie de visualisation ggplot2 ?**

2.  **Comment réaliser et personnaliser des visualisations avec ggplot2 ?**

3.  **Comment utiliser une visualisation pour illustrer un phénomène ?**

Dans ce module, vous apprendrez également à utiliser un type particulier de données dans R : **les facteurs**

------------------------------------------------------------------------

------------------------------------------------------------------------

## 1-Charger et utiliser la librairie ggplot2

La communauté R a développé plusieurs miliers de librairies qui servent a démultiplier les possibilité du langage R (et à ne pas réinventer la roue).

L'une des librairires les plus utilisées est la librairie ggplot2 qui sert a visualiser des données. Elle est particulièrement utilisée dans les publications scientifiques car **hautement personnalisable.**

1-Pour utiliser la librairie, il faut d'abord **la télécharger sur le serveur du CRAN** :

```{r}
# Téléchargement de la librairie ggplot2
install.packages("ggplot2")
```

2-Une fois la librairie installée, il faut **la charger dans l'environnement de développement :**

```{r}
# Chargement de la librairie ggplot2 dans l'environnement de développement
library(ggplot2)
```

------------------------------------------------------------------------

### *Exercice d'application :*

Vérifiez que le package ggplot2 est bien chargé au moyen de la commande search()

```{r}
# Ecrivez votre code ici :

```

------------------------------------------------------------------------

------------------------------------------------------------------------

## 2-Réaliser et personnaliser une visualisation avec la librairie ggplot2

ggplot2 propose un grand nombre de visualisations classiques : histogrammes, scatterplots, boites à moustache, etc. Les visualisations dans ggplot2 commencent par le préfixe "geom\_".

Pour voir la liste de toutes les visualisations proposées par ggplot2, on peut utiliser la fonction apropos() qui cherche une chaîne de caractère dans l'aide de R

```{r}
# Recherche de toutes les visualisations geom_ du package ggplot2
apropos("geom_")
```

Il est ensuite possible de demander des précisions sur chaque visualisation en utilisant l'aide de R :

```{r}
# Accès à l'aide pour la visualisation diagramme en bar de ggplot2
help(geom_bar)

# ou alternativement
?geom_bar
```

------------------------------------------------------------------------

### *Exercice d'application :*

Trouvez la fonction de ggplot permettant de creer un scatter plot (ensemble de points définis par leur coordonnées en absisse et en ordonnée). Affichez son aide.

```{r}
# Ecrivez votre code ici :

```

------------------------------------------------------------------------

### 2.1 Le dataset PlantGrowth et la notion de facteur

Nous allons maintenant construire nos premières visualisations avec ggplot2.

Pour cela, nous utiliserons le dataset PlantGrowth. Ce dataset vise à **étudier l'influence d'un traitement (non communiqué) sur la croissance d'une plante.** Pour cela, on mesure le poids total de la récolte selon que l'on a appliqué le traitement 1 ou le traitement 2.

```{r}
# Afficher les premières lignes du fichier "PlantGrowth"
head(PlantGrowth)
```

Dans R, les données sont **typées**. On distingue par exemple les trois principaux types suivants :

1.  les **nombres réels** (le plus fréquent) : double ou **dbl**

2.  les **chaînes de caractère** : character ou **chr**

3.  les **facteurs** : factor ou **fctr**

"Quatre" est par exemple considéré par R comme une chaîne de caractère et non comme un nombre.

La notion de **facteur** correspond dans R à une **variable de ventilation**, c'est à dire une variable qui scinde le dataset en plusieurs groupes distincts, chaque ligne appartenant à un **groupe donné**. Il sera très utile par exemple dans la fonction "group_by" que nous verrons plus loin.

Par exemple dans le dataset PlantGrowth, la variable group est un **facteur**

```{r}
# Pour vérifier qu'une variable est de type facteur, on utilise la commande is()
is.factor(PlantGrowth$group)
```

Il est souvent utile de connaître toutes les valeurs possibles d'un facteur. En langage statistique, cela revient à lister l**'ensemble des modalités d'une variable**. Lorsque la variable est de type facteur, on utilise la fonction **levels**.

```{r}
# Affichage de l'ensemble des valeurs possibles de la variable group du dataset PlantGrowth
levels(PlantGrowth$group)
```

------------------------------------------------------------------------

### *Exercice d'application :*

Reprenez le dataset iris. Trouvez quelle variable du dataset est un facteur. Faites la liste de ses modalités.

```{r}
# Ecrivez votre code ici :
```

------------------------------------------------------------------------

La variable groupe du dataset PlantGrowth contient trois modalités :

1.  **ctrl**, le groupe contrôle, **sans traitement**

2.  **trt1** : le groupe ayant reçu **le traitement 1**

3.  **trt2** : le groupe ayant reçu **le traitement 2**

### 2.2 Première visualisation : l'histogramme

Dans un premier temps, nous allons nous interesser à la variable **weight** du dataset PlantGrowth. Un histogramme va nous permettre de voir comment le poids des récoltes est répartie : en terme statistiques, on parle de la **distribution des valeurs** de la variable.

La librairie ggplot2 contient une visualisation en histogramme avec la fonction **geom_histogram()**. Elle fonctionne **en couches que l'on ajoute progressivement avec le symbôle +**

```{r message=FALSE}
# Visualisation en histogramme de la variable weigh du dataset PantGrowth

ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
  geom_histogram(aes(x = weight)) # la deuxième couche définit la visualisation et la variable sur laquelle l'appliquer

```

On modifie ensuite le graphique toujours sur le principe de **couches successives**

```{r message = F}
# Visualisation en histogramme de la variable weigh du dataset PantGrowth

ggplot(PlantGrowth) +                                             
  geom_histogram(aes(x = weight), 
                 color = "white",data =                           # on ajoute un contour blanc
                 bins = 9) +                                      # on ajuste le nombre d'intervalles (bins)
  theme_bw() +                                                    # on ajoute un habillage "black and white"
  ggtitle("Histogramme des poids à sec des récoltes") +           # on ajoute un titre
  labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")  # on ajoute des etiquettes

```

------------------------------------------------------------------------

### *Exercice d'application :*

Reprenez le dataset iris. Faites un histogramme de la variable Petal.Length. Personnalisez le thème, le titre et les étiquettes à votre convenance.

```{r}
# Ecrivez votre code ici :
```

------------------------------------------------------------------------

## 3-Utiliser une visualisation pour illustrer un phénomène

**Le diagramme ci-dessous permet-il de savoir si le traitement influence la croissance des plantes ?**

![](images/clipboard-984531557.png)

### 3.1-Un peu d'esthétique

Pour y voir plus clair sur ce sujet, nous allons utiliser une fonctionnalité spécifique de la librairie ggplot : **la notion d'esthétique** (aesthetic) contrôler par la fonction **aes().**

-   L'esthétique peut être déclarée au tout début ou dans la couche ou elle est pertinente. Attention, chaque nouvelle déclaration écrase la précédente.

-   La fonction d'esthétique permet d'asservir les paramètres du graphique (son esthétique) à certaines variables. En clair cela signifie que le paramètre esthétique choisit **variera en fonction de la valeur de ce qu'il représente.**

-   La couleur de remplissage sert souvent de paramètre esthétique pour représenter différents groupes, ou plus spécifiquement dans R : **un facteur**. Dans ggplot, le paramètre esthétique correspondant à la couleur de remplissage se nomme "fill".

On peut donc associer une couleur de remplissage au facteur de notre choix. Ici nous choisirons le facteur "group" qui correspond au traitement donné à la plante

```{r message = F}
# Utilisation de l'ésthétique "fill" pour représenter le facteur "Traitement"

ggplot(PlantGrowth) +                                             
  geom_histogram(aes(x = weight, fill = group), # le parametre fill est ajouté dans la fonction aes()
                 color = "white",
                 bins = 9) +                 
  theme_bw() +                                                    
  ggtitle("Histogramme des poids à sec des récoltes") +          
  labs(x = "Poids à sec de la récolte", y = "Nombre de mesures")  
```

**Question : peut-on discerner une influence du traitement sur la croissance de la plante ?**

### 3.2-Ajustement du graphique

En fonction de ce que vous cherchez à montrer, vous aurez probablement a ajuster certain parametres secondaires. Ces parametres secondaires sont mentionnés dans l'aide de la fonction. Cela dit, il est parfois plus simple de poser la question dans un moteur de recherche.

Dans le cas nous allons nous interesser à la position des barres de l'histogramme les unes par rapport aux autres. Cette position est controlée par le paramètre "position" qui est par défaut égale à "stack".

```{r message = F}
# Ajustement de la position des barres pour renforcer la lisibilité du graphe

ggplot(PlantGrowth) +                                             
  geom_histogram(aes(x = weight, fill = group), 
                 color = "white",
                 bins = 9,
                 position = "stack") +                 # parametre contrôlant la position des barres de l'histogramme
  theme_bw() +                                                    
  ggtitle("Histogramme des poids à sec des récoltes") +          
  labs(x = "Poids à sec de la récolte", y = "Nombre de mesures")  
```

------------------------------------------------------------------------

### *Exercice d'application :*

A l'aide de l'aide et/ou d'internet, trouvez les quatre valeurs possibles pour le parametre **position.** Sélectionnez celui qui vous parait le plus approprié pour illustrer l'effet du traitement sur la croissance de la plante.

```{r}
# Modifiez le code ci-dessous :
ggplot(PlantGrowth) +                                             
  geom_histogram(aes(x = weight, fill = group), 
                 color = "white",
                 bins = 9,
                 position = "stack") +                 # parametre contrôlant la position des barres de l'histogramme
  theme_bw() +                                                    
  ggtitle("Histogramme des poids à sec des récoltes") +          
  labs(x = "Poids à sec de la récolte", y = "Nombre de mesures")  
```

------------------------------------------------------------------------

------------------------------------------------------------------------

# 4-Conclusion

Dans ce module, nous avons vu comment utiliser la librairie graphique ggplot2 pour créer des visualisations avec R.

-   Nous avons découvert au passage la notion de **facteur**

-   Nous avons compris la logique de **programmation en couches successives** utilisée par ggplot

-   Nous avons vu comment **personnaliser un graphique** pour le rendre plus attrayant

-   Nous avons vu comment **asservir un ou plusieurs parametres du graphique aux données** pour mieux illustrer un phénomène
