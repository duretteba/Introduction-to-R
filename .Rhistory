levels(diamonds$cut)
ggplot(diamonds,aes(cut))
ggplot(diamonds) +
geom_histogram(aes(cut))
ggplot(diamonds) +
geom_bar(aes(cut))
tables(diamonds$cut)
table(diamonds$cut)
help(filter)
diamonds %>% filter(cut %in% "Fair")
diamonds %>% filter(cut == "Fair")
help(diamonds)
# Ecrivez votre code ici :
diamonds %>% filter(price>15000)
# Multiplier par quatre la colonne Petal.Lenght du dataset iris
4 * iris$Petal.Length
# Prendre le sinus de la colonne Petal.Lenght du dataset iris
sin(iris$Petal.Length)
# Somme de la colonne Petal.Length et Sepal.Length
iris$Petal.Length + iris$Sepal.Length
# Produit scalaire de la colonne Petal.Length et Sepal.Length
iris$Petal.Length * iris$Sepal.Length
# Produit de la colonne Petal.Length et Sepal.Length
iris$Petal.Length .* iris$Sepal.Length
# Produit de la colonne Petal.Length et Sepal.Length
iris$Petal.Length * iris$Sepal.Length
#Ecrivez votre réponse ici :
sin(iris$Petal.Length+iris$Sepal.Length)
# Téléchargement de la librairie ggplot2
install.packages("ggplot2")
# Chargement de la librairie ggplot2 dans l'environnement de développement
library(ggplot2)
# Ecrivez votre code ici :
search()
# Chargement de la librairie ggplot2 dans l'environnement de développement
library(ggplot2)
# Ecrivez votre code ici :
search()
# Ecrivez votre code ici :
search(ggplot2)
# Ecrivez votre code ici :
search("ggplot2")
# Ecrivez votre code ici :
search()
# Recherche de toutes les visualisations geom_ du package ggplot2
apropos("geom_")
help(geom_bar)
help("geom_point")
# Afficher les premières lignes du fichier "PlantGrowth"
head(PlantGrowth)
# Afficher les premières lignes du fichier "PlantGrowth"
head(PlantGrowth, n=20)
# Pour vérifier qu'une variable est de type facteur, on utilise la commande is.factor()
is.factor(PlantGrowth$group)
# Affichage de l'ensemble des valeurs possibles de la variable group du dataset PlantGrowth
levels(PlantGrowth$group)
iris$Sepal.Length
# Ecrivez votre code ici :
data(iris)
force(iris)
# Ecrivez votre code ici :
levels(iris$Species)
ggplot(PlantGrowth)
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_histogram(aes(weight)) # la deuxième couche définit la visualisation et la variable sur laquelle l'appliquer
PlantGrowth$weight
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(PlantGrowth) +
geom_histogram(aes(weight),
color = "white",                                # on ajoute un contour blanc
bins = 9) +                                      # on ajuste le nombre d'intervalles (bins)
theme_bw() +                                                    # on ajoute un habillage "black and white"
ggtitle("Histogramme des poids à sec des récoltes") +           # on ajoute un titre
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")  # on ajoute des etiquettes
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(PlantGrowth) +
geom_histogram(aes(weight),
#color = "white",                                # on ajoute un contour blanc
bins = 9) +                                      # on ajuste le nombre d'intervalles (bins)
theme_bw() +                                                    # on ajoute un habillage "black and white"
ggtitle("Histogramme des poids à sec des récoltes") +           # on ajoute un titre
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")  # on ajoute des etiquettes
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(PlantGrowth) +
geom_histogram(aes(weight),
color = "white",                                # on ajoute un contour blanc
bins = 9) +                                      # on ajuste le nombre d'intervalles (bins)
theme_bw() +                                                    # on ajoute un habillage "black and white"
ggtitle("Histogramme des poids à sec des récoltes") +           # on ajoute un titre
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")  # on ajoute des etiquettes
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(PlantGrowth) +
geom_histogram(aes(weight),
color = "white",                                # on ajoute un contour blanc
bins = 9) +                                      # on ajuste le nombre d'intervalles (bins)
#theme_bw() +                                                    # on ajoute un habillage "black and white"
ggtitle("Histogramme des poids à sec des récoltes") +           # on ajoute un titre
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")  # on ajoute des etiquettes
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(PlantGrowth) +
geom_histogram(aes(weight),
color = "white",                                # on ajoute un contour blanc
bins = 9) +                                      # on ajuste le nombre d'intervalles (bins)
theme_bw() +                                                    # on ajoute un habillage "black and white"
ggtitle("Histogramme des poids à sec des récoltes") +           # on ajoute un titre
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")  # on ajoute des etiquettes
names(iris)
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
iris$
ggplot(iris) +
geom_histogram(aes(Petal.Length),  color = "white", bins = 9)
ggplot(iris) +
geom_histogram(aes(Petal.Length),  color = "white", bins = 9)
ggplot(iris) +
geom_histogram(aes(Petal.Length),  color = "white", bins = 9)
# Ecrivez votre code ici :
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(iris) +
geom_histogram(aes(Petal.Length),  color = "black", bins = 9)
+
theme_bw() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")
ggplot(iris) +
geom_histogram(aes(Petal.Length),  color = "black", bins = 9)
ggplot(iris) +
geom_histogram(aes(Petal.Length),  color = "black", bins = 6)
help("geom_histogram")
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black", bins = 6) +
theme_bw()
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black", bins = 6) +
theme_bw() +
ggtitle("Histogramme des poids à sec des récoltes")
# Ecrivez votre code ici :
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",bins = 6) +
theme_bw() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",bins = 6) +
theme_grey() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",bins = 6) +
theme_light() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")
# Ecrivez votre code ici :
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",bins = 6) +
theme_classic() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte",y = "Nombre de mesures")
# Ecrivez votre code ici :
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",bins = 6) +
theme_classic() +
ggtitle("Histogramme de la longueur des sépales") +
labs(x = "Longueur des sépales",y = "Nombre de mesures")
# Ecrivez votre code ici :
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",bins = 10) +
theme_classic() +
ggtitle("Histogramme de la longueur des sépales") +
labs(x = "Longueur des sépales",y = "Nombre de mesures")
geom_histogram()
help(geom_histogram)
# Ecrivez votre code ici :
# Visualisation en histogramme de la variable weigh du dataset PantGrowth
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",binwidth = 1) +
theme_classic() +
ggtitle("Histogramme de la longueur des sépales") +
labs(x = "Longueur des sépales",y = "Nombre de mesures")
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",binwidth = 1) +
theme_classic() +
ggtitle("Histogramme de la longueur des sépales") +
labs(x = "Longueur des sépales",y = "Nombre de mesures") +
scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7))
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",binwidth = 1) +
theme_classic() +
ggtitle("Histogramme de la longueur des sépales") +
labs(x = "Longueur des sépales",y = "Nombre de mesures")
help(scale_x_continuous)
# Ecrivez votre code ici :
# Visualisation en histogramme de la variable Sepal.Length du dataset iris
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",binwidth = 1) +
theme_classic() +
ggtitle("Histogramme de la longueur des sépales") +
labs(x = "Longueur des sépales",y = "Nombre de mesures") +
scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7))
[1,2,3,4]
1,2,3,4
[1,2,3,4]
c(1,2,3,4)
help(c)
# Visualisation en histogramme de la variable Sepal.Length du dataset iris
etiquette <- c(0,1,2,3,4,5,6,7)
is(etiquette)
# Visualisation en histogramme de la variable Sepal.Length du dataset iris
etiquette = c(0,1,2,3,4,5,6,7)
etiquette <- c(0,1,2,3,4,5,6,7)
ggplot(iris) +
geom_histogram(aes(Petal.Length),color = "black",binwidth = 1) +
theme_classic() +
ggtitle("Histogramme de la longueur des sépales") +
labs(x = "Longueur des sépales",y = "Nombre de mesures") +
scale_x_continuous(breaks = etiquette)
head(PlantGrowth)
levels(PlantGrowth$group)
# Utilisation de l'ésthétique "fill" pour représenter le facteur "Traitement"
ggplot(PlantGrowth) +
geom_histogram(aes(x = weight, fill = group), # le parametre fill est ajouté dans la fonction aes()
color = "white",
bins = 9) +
theme_bw() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte", y = "Nombre de mesures")
# Ajustement de la position des barres pour renforcer la lisibilité du graphe
ggplot(PlantGrowth) +
geom_histogram(aes(x = weight, fill = group),
color = "white",
bins = 9,
position = "stack") +                 # parametre contrôlant la position des barres de l'histogramme
theme_bw() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte", y = "Nombre de mesures")
help("geom_histogram")
# Ajustement de la position des barres pour renforcer la lisibilité du graphe
ggplot(PlantGrowth) +
geom_histogram(aes(x = weight, fill = group),
color = "white",
bins = 9,
position = "dodge") +                 # parametre contrôlant la position des barres de l'histogramme
theme_bw() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte", y = "Nombre de mesures")
# Ajustement de la position des barres pour renforcer la lisibilité du graphe
ggplot(PlantGrowth) +
geom_histogram(aes(x = weight, fill = group),
color = "white",
bins = 9,
position = "fill") +                 # parametre contrôlant la position des barres de l'histogramme
theme_bw() +
ggtitle("Histogramme des poids à sec des récoltes") +
labs(x = "Poids à sec de la récolte", y = "Nombre de mesures")
help(boxplot)
help(geom_boxplot)
help(geom_histogram)
help(geom_boxplot)
data(PlantGrowth)
force(PlantGrowth)
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, fill = group))
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, group = group))
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, x = group))
log(10,base = 10)
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, x = group))
theme_bw()
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, x = group))
theme_light()
View(PlantGrowth)
names(PlantGrowth)
head(PlantGrowth)
View(PlantGrowth)
data("PlantGrowth")
force(PlantGrowth)
View(PlantGrowth)
head(PlantGrowth, n = 20)
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, group = group))
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, x = group))
# Ecrivez votre code ici :
ggplot(PlantGrowth) +             # la première couche définit le jeu de données à utiliser
geom_boxplot(aes(y = weight, x = group, fill = group))
help("diamonds")
levels(diamonds$cut)
data(diamonds)
force(diamonds)
levels(diamonds$cut)
table(diamonds$cut)
# Restriction du tableau aux diamants dont la coupe est "Fair"
diamonds %>% filter(cut == "Fair")
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
# Restriction du tableau aux diamants dont la coupe est "Fair"
diamonds %>% filter(cut == "Fair")
# Restriction du tableau aux diamants dont la coupe est "Fair"
diamonds %>% filter(cut == "Fair", color == "E")
# Restriction du tableau aux diamants dont la coupe n'est pas "Fair"
diamonds %>% filter(cut != "Fair")
# Restriction du tableau aux diamants dont la coupe est "Fair" ou "Good"
diamonds %>% filter(cut %in% c("Fair","Good","Ideal"))
# Restriction du tableau aux diamants dont la coupe est "Fair" ou "Good"
choix <- c("Fair","Good","Ideal")
diamonds %>% filter(cut %in% choix)
test <- c(1, "un", FALSE)
is(test)
# Ecrivez votre code ici :
diamonds %>% filter(price > 15000)
diamonds$x
dim(diamonds)
diamond[0,:]
diamonds[0,:]
diamonds[1,:]
diamonds[:,:]
diamonds[,,:]
diamonds[,,1]
diamonds$x
diamonds$x[1]
diamonds$x[0]
View(diamonds)
#Selection des colonnes Cut, Clarity et Price
diamonds %>% select(cut, clarity, price)
#Remarque : les noms des colonnes ne sont pas entre guillemets
#Selection des colonnes Cut, Clarity et Price
diamonds %>% select("cut", clarity, price)
#Remarque : les noms des colonnes ne sont pas entre guillemets
diamonds %>% select(-cut, -clarity, -price)
diamonds %>% select(!c(cut, clarity, price))
# Selection de toutes les colonnes commençant par la lettre "c"
diamonds %>% select(starts_with("c")) # la chaine de caractère est entre guillements
help(select)
# Ecrivez votre code ici :
diamonds %>% filter(cut == "Ideal") %>% select(x,y,z,price)
# Ecrivez votre code ici :
diamonds %>%
filter(cut == "Ideal") %>%
select(x,y,z,price)
# Ecrivez votre code ici :
diamonds %>%
select(x,y,z,price) %>%
filter(cut == "Ideal")
# Ecrivez votre code ici :
diamonds %>%
filter(cut == "Ideal") %>%
select(x,y,z,price)
# Ecrivez votre code ici :
diamonds %>%
#  filter(cut == "Ideal") %>%
select(x,y,z,price)
# Ecrivez votre code ici :
diamonds %>%
filter(cut == "Ideal") %>%
select(x,y,z,price)
# Ajout de la colonne "volume" au dataset diamonds avec la fonction mutate
diamonds %>% mutate(volume = x * y * z)  #le nom de la colonne n'est pas entre guillemets
# Scatter plot du poids des diamants en fonction de leur volume
diamonds %>%
mutate(volume = x * y * z) %>%
ggplot() +                                  # Attention à ne pas confondre le + de ggplot et %>%
geom_point(aes(x=volume, y = carat))
# Ecrivez votre code ici :
diamonds %>% mutate(volume = x * y * z)
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume < 10)
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume > 10) %>%
filter(volume < 1000)
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume > 10) %>%
filter(volume < 1000) %>%
ggplot()
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume > 10) %>%
filter(volume < 1000) %>%
ggplot() +
geom_point(x = volume, y = price)
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume > 10) %>%
filter(volume < 1000) %>%
ggplot() +
geom_point(aes(x = volume, y = price))
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume > 10) %>%
filter(volume < 1000) %>%
ggplot() +
geom_point(aes(x = volume, y = price, color = clarity))
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume > 10) %>%
filter(volume < 1000) %>%
mutate(rapport = price / volume)
ggplot() +
geom_point(aes(x = volume, y = rapport, color = clarity))
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume > 10) %>%
filter(volume < 1000) %>%
mutate(rapport = price / volume) %>%
ggplot() +
geom_point(aes(x = volume, y = rapport, color = clarity))
# Ecrivez votre code ici :
diamonds %>%
mutate(volume = x * y * z) %>%
filter(volume >10 & volume < 1000) %>%
mutate(rapport = price / volume) %>%
ggplot() +
geom_point(aes(x = volume, y = rapport, color = clarity))
library(tidyverse)
levels(diamonds$cut)
# Calcul du prix moyen des diamants en fonction de leur clarté
diamonds %>% #group_by(clarity) %>%
summarise(Moyenne = mean(price))    # on déclare ici la fonction de résumé souhaitée
# Calcul du prix moyen des diamants en fonction de leur clarté
diamonds %>% group_by(clarity) %>%
summarise(Moyenne = mean(price))    # on déclare ici la fonction de résumé souhaitée
# Calcul du prix moyen, median et de l'écart-typedu prix des diamants en fonction de leur clarté
diamonds %>% group_by(clarity) %>%
summarise(Moyenne = mean(price),
Mediane = median(price),
"Ecart-type" = sd(price))    # Ici, les guillements sont nécessaires à cause du "-"
# Calcul du prix moyen, median et de l'écart-typedu prix des diamants en fonction de leur clarté et de leur découpe
diamonds %>% group_by(clarity, cut) %>%   # pour une combinaison des facteurs
summarise(Moyenne = mean(price),
Mediane = median(price),
"Ecart-type" = sd(price))
# Calcul du prix moyen, median et de l'écart-typedu prix des diamants en fonction de leur clarté et de leur découpe
diamonds %>% group_by(clarity, cut) %>%   # pour une combinaison des facteurs
summarise(Moy = mean(price),
Mediane = median(price),
"Ecart-type" = sd(price))
# Calcul du prix moyen, median et de l'écart-typedu prix des diamants en fonction de leur clarté et de leur découpe
diamonds %>% group_by(clarity, cut) %>%   # pour une combinaison des facteurs
summarise(Moyenne = miin(price),
Mediane = median(price),
"Ecart-type" = sd(price))
# Calcul du prix moyen, median et de l'écart-typedu prix des diamants en fonction de leur clarté et de leur découpe
diamonds %>% group_by(clarity, cut) %>%   # pour une combinaison des facteurs
summarise(Moyenne = mean(price),
Mediane = median(price),
"Ecart-type" = sd(price))
diamonds %>% group_by(cut) %>%
mutate(Moyenne = mean(price),               # On utilise la fonction mutate plutôt que summarise
"Ecart-type" = sd(price))
diamonds %>% group_by(cut) %>%
mutate(Moyenne = mean(price),               # On utilise la fonction mutate plutôt que summarise
"Ecart-type" = sd(price)) %>%
arrange(cut)
# Calcul du prix moyen, median et de l'écart-type du prix des diamants en fonction de leur clarté et de leur découpe
diamonds %>% group_by(cut) %>%
mutate(Moyenne = mean(price),               # On utilise la fonction mutate plutôt que summarise
"Ecart-type" = sd(price)) %>%
ungroup() %>%
mutate(prix_centre = price - Moyenne,
prix_centre_reduit = prix_centre / `Ecart-type`) %>%  # on rétuilise le résultat précédent
select(cut,price,Moyenne,`Ecart-type`, prix_centre,prix_centre_reduit) %>%
arrange(cut)
# Creation et assignation d'un tableau de mémoire
long <- tibble(
Product = c("A", "A", "B", "B"),
Year = c(2020, 2021, 2020, 2021),
Sales = c(100, 150, 200, 250)
)
# Creation et assignation d'un tableau de mémoire
long <- tibble(
Product = c("A", "A", "B", "B"),
Year = c(2020, 2021, 2020, 2021),
Sales = c(100, 150, 200, 250)
)
long
# Passage d'un format de tableau long à un format de tableau wide
wide <- long %>% pivot_wider(
names_from = "Year",         # On définit la variable d'où proviennent les futures étiquettes de colonne
values_from = "Sales"        # On définit la variable où l'on va trouver les valeurs pour remplir le tableau
)
print(wide)
# Passage d'un format de tableau wide à un format de tableau long
wide %>% pivot_longer(
cols = -Product,
names_to = "Year",
values_to = "Sales"
)
