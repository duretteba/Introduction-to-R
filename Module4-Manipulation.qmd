---
title: "Premiers pas avec R"
format: html
editor: visual
copyright: "Barthélémy DURETTE 2024 tous droits réservés"
---

------------------------------------------------------------------------

# Manipuler des tableaux avec R

------------------------------------------------------------------------

### Bienvenue dans ce quatrième module de la formation "Introduction au logiciel R".

La librairie Tidyverse, déjà utilisée dans le module 3 pour manipuler les colonnes et les lignes d'un tableau, propose également des fonctions puissantes pour transformer directement un tableau de donnée en un autre tableau, évitant parfois de nombreuses étapes fastidieuses.

Ici nous verrons notamment :

1.  **Comment résumer un jeu de données à un tableau de synthèse avec group_by et summarise,**

2.  **Comment rechaper un tableau avec la fonction pivot**

Vous apprendrez également à utiliser le **symbôle d'assignation \<-** et à creer un jeu de données d'exemple.

------------------------------------------------------------------------

------------------------------------------------------------------------

La librairie Tidyverse, déjà utilisée dans le module 3 pour manipuler les colonnes et les lignes d'un tableau, propose également des fonctions puissantes pour transformer directement un tableau de donnée en un autre tableau, évitant parfois de nombreuses étapes fastidieuses.

```{r}
library(tidyverse)
```

## 1 Résumer un tableau avec group_by et summarise

Une constante en statistique est la présence de groupes ou de catégories qui **séparent l'échantillon.** On parle de **ventilation**. Les variables qui permettent de ventiler les éléments d'un échantillon s'appelle, dans le langage R, **un facteur**.

Par exemple, le jeu de données diamonds utilisé dans le module 3 contient trois variables facteur :

-   cut : la qualité de la découpe du diamant, de Fair à Ideal (5 niveaux)

-   color : la couleur, de A à G (7 niveaux)

-   clarity : la clarté, de I1 à IF (8 niveaux)

Pour obtenir la liste des modalités de chaque facteurs, on utilise la fonction level()

```{r}
levels(diamonds$cut)
```

La fonction **group_by()** en association avec la fonction **summarise()** vous permet de réaliser à la volée des opérations sur chaque portion de tableau correspondant à un groupe.

Par exemple, on peut calculer la **valeur moyenne du prix des diamants en fonction de leur clarté** en deux étapes :

1.  **On déclare le facteur utilisé** pour faire les regroupement (ici clarity) dans la fonction **group_by**

2.  On **déclare la variable et la fonction de synthèse** dans la fonction summarise : ici la variable price et la fonction de synthèse mean(price)

```{r message = F}
# Calcul du prix moyen des diamants en fonction de leur clarté

diamonds %>% group_by(clarity) %>%
  summarise(Moyenne = mean(price))    # on déclare ici la fonction de résumé souhaitée
```

On peut ajouter **autant de colonnes de résumé que souhaité** :

```{r message = F}
# Calcul du prix moyen, median et de l'écart-typedu prix des diamants en fonction de leur clarté

diamonds %>% group_by(clarity) %>%
  summarise(Moyenne = mean(price),
            Mediane = median(price),
            "Ecart-type" = sd(price))    # Ici, les guillements sont nécessaires à cause du "-"
```

On peut également combiner **plusieurs facteurs** de ventilation :

```{r message = F}
# Calcul du prix moyen, median et de l'écart-typedu prix des diamants en fonction de leur clarté et de leur découpe

diamonds %>% group_by(clarity, cut) %>%   # pour une combinaison des facteurs
  summarise(Moyenne = mean(price),
            Mediane = median(price),
            "Ecart-type" = sd(price)) 
```

Mais on peut aller **plus loin.** En effet, l**a fonction mutate() est sensible à la fonction group_by(). On peut donc réaliser sur un même tableau des opérations sur l'ensemble des données ou par groupes.**

Supposons que je souhaite centrer et réduire le prix de mes diamants pour chaque groupe de découpe. Je peux procéder de la manière suivante :

1.  Calculer la moyenne et l'écart-type de chaque groupe et la reporter dans le tableau avec la fonction mutate()

2.  Calculer la valeur centrée réduite par groupe de chaque diamants

```{r}

# Calcul du prix moyen, median et de l'écart-type du prix des diamants en fonction de leur clarté et de leur découpe

diamonds %>% group_by(cut) %>%   
  mutate(Moyenne = mean(price),               # On utilise la fonction mutate plutôt que summarise
         "Ecart-type" = sd(price)) %>%  
  ungroup() %>% 
  mutate(prix_centre = price - Moyenne,
         prix_centre_reduit = prix_centre / `Ecart-type`) %>%  # on rétuilise le résultat précédent
  select(cut,price,Moyenne,`Ecart-type`, prix_centre,prix_centre_reduit) %>% 
  arrange(cut)
```

**Pourquoi de tels écarts ? Comment y remédier ?**

------------------------------------------------------------------------

------------------------------------------------------------------------

### *Exercice d'application :*

A partir du dataset diamonds :

1.  Grâce à la fonction **mutate()**, calculez le prix de chaque diamant rapporté à son poids (carat)

2.  Grâce à la fonction **summarise()**, construisez un tableau de synthèse fournissant le prix par carat moyen et son écart-type en fonction de leur découpe (facteur cut)

3.  Grâce à la fonction **mutate()**, Calculez enfin le prix par carat centré-réduit de chaque diamant par groupe de découpe

4.  Concluez

```{r}
# Ecrivez votre code ici :



```

------------------------------------------------------------------------

## **2-Comment rechaper un tableau avec la fonction pivot**

Le fichier de données classique contient un enregistrement par ligne et une variable par colonne. Ce format de tableau n'est pas toujours idéal pour l'analyse. Dans les tableaurs, on utilise souvent une fonction appelée tableau croisé dynamique qui permet de construire des tableaux de synthèse (pivot table en anglais). Cette fonctionnalité est assurée dans R par deux fonctions :

-   pivot_wider : cette fonction permet de créer autant de colonnes qu'il y a de modalités d'un facteur. Mécaniquement, le nombre de colonnes augmente, le tableau devient plus large, d'où le nom de la fonction pivot\_**wider**

-   pivot_longer : à l'inverse, on peut décider de concentrer plusieurs colonnes de sorte qu'une colonne précise le nom de la variable et la colonne associée sa modalité. Le nombre de colonnes diminue mais le nombre de lignes augmente. Le tableau s'allonge, d'où le nom de la fonction pivot**\_longer**

Un exemple valant mieux qu'un long discours, voici un tableau au **format** **"long"**

![Et voici le même tableau au **format "wide"** avec un **pivot sur la variable year**. La colonne unique "year" a été transformé en plusieurs colonnes portant le nom de l'année en question. La valeur des ventes (sales) a été utilisée telle que pour remplir le tableau.](images/clipboard-200595491.png)

![](images/clipboard-3415304310.png)

Voici comment procéder pour cela avec R. Créons d'abord l'exemple. Pour le conserver en mémoire pour la suite, nous allons l'assigner à une variable que nous appelerons "long". On utilise pour cela **le symbôle d'assignation \<-.** La fonction **tibble()** permet de créer un tableau dans R.

```{r}
# Creation et assignation d'un tableau de mémoire
long <- tibble(
  Product = c("A", "A", "B", "B"),
  Year = c(2020, 2021, 2020, 2021),
  Sales = c(100, 150, 200, 250)
)

long
```

Cette fois, le tableau ne s'affiche pas directement dans le document car il est mis en mémoire mais vous pouvez le retrouver dans l'explorateur d'environnement en haut à droite de R Studio.

![](images/clipboard-479202456.png)

**Passage d'un tableau "long" à un tableau "wide"**

```{r}
# Passage d'un format de tableau long à un format de tableau wide

wide <- long %>% pivot_wider(
  names_from = "Year",         # On définit la variable d'où proviennent les futures étiquettes de colonne
  values_from = "Sales"        # On définit la variable où l'on va trouver les valeurs pour remplir le tableau
  ) 

print(wide)

```

**Passage d'un tableau "wide" à un tableau "long"**

```{r}
# Passage d'un format de tableau wide à un format de tableau long

wide %>% pivot_longer(
  cols = -Product,
  names_to = "Year",
  values_to = "Sales"
)

```

------------------------------------------------------------------------

------------------------------------------------------------------------

### *Exercice d'application :*

Le code ci-dessous créé le tableau de données "notes_long", executez le puis suivez les instruction.

```{r}
# Création du tableau d'exemple :
notes_long <- tibble(
  Etudiant = c("Jean", "Jean", "Jean", "Jean", 
               "Jeanne", "Jeanne", "Jeanne", "Jeanne",
               "Alice", "Alice", "Alice", "Alice"),
  Matière = c("Maths", "Histoire", "Maths", "Histoire", 
              "Maths", "Histoire", "Maths", "Histoire",
              "Maths", "Histoire", "Maths", "Histoire"),
  Semestre = c("Automne", "Automne", "Printemps", "Printemps",
               "Automne", "Automne", "Printemps", "Printemps",
               "Automne", "Automne", "Printemps", "Printemps"),
  Note = c(85, 90, 88, 92, 95, 80, 93, 85, 78, 82, 80, 85)
)
notes_long
```

**1-**A l'aide de la fonction **pivot_wider**, transformez le tableau note_long en un tableau note_wide correspondant au tableau ci-dessous.

![](images/clipboard-3440111423.png)

```{r}
# Ecrivez votre code ici:


```

2-A l'aide de la fonction **group_by** et **summarise**, affichez un tableau résumé des moyennes annuelles de chaque étudiant dans les deux matières identique à celui-ci.

![](images/clipboard-2952717993.png)

```{r}
# Ecrivez votre code ici:

```

A l'aide de l'aide de la fonction pivot_wider, trouvez une manière de réaliser le tableau des moyennes sans utilise group_by ni summarise

```{r}
# Ecrivez votre code ici :
```
